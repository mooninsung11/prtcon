import pandas as pd
from tkinter import Tk
<<<<<<< HEAD
from tkinter.filedialog import askopenfilenames
import pymysql
import os

def main():
    # 1. 여러 파일 선택창 띄우기
    root = Tk()
    root.withdraw()
    file_paths = askopenfilenames(
        title="CSV 파일을 모두 선택하세요 (Ctrl 또는 Shift로 다중 선택)",
        filetypes=[("CSV files", "*.csv")]
    )
    root.destroy()
    if not file_paths:
        print("파일이 선택되지 않았습니다.")
        return

    # 2. MySQL 연결
    conn = pymysql.connect(
        host='localhost',
        user='root',
        password='dbsgusqja1',
        db='test',
        charset='utf8'
    )
    cursor = conn.cursor()

    sql = """
    INSERT INTO Product (name, price, image_url, category)
    VALUES (%s, %s, %s, %s)
    """

    total = 0
    for file_path in file_paths:
        df = pd.read_csv(file_path)
        print(f"\n📂 선택한 파일: {file_path}")
        print(df.head())
        print(df.columns)

        df = df.where(pd.notnull(df), None)
        category = os.path.splitext(os.path.basename(file_path))[0]
        count = 0

        for _, row in df.iterrows():
            price_val = row['price']
            if isinstance(price_val, str):
                price_val = price_val.replace(',', '').replace('원', '').strip()
                price_val = float(price_val) if price_val else None

            cursor.execute(sql, (
                row.get('name', None),
                price_val,
                row.get('image_url', None),
                category
            ))
            count += 1
            total += 1

        print(f"✅ '{category}'에서 {count}개 삽입 완료.")

        conn.commit()
    cursor.close() 
    conn.close()
    print(f"\n🔥 모든 파일 합쳐서 총 {total}개 데이터를 Product 테이블에 삽입했습니다.")

=======
from tkinter.filedialog import askopenfilename
from prophet import Prophet
import matplotlib.pyplot as plt

# 1. 파일 다이얼로그로 CSV 파일 선택
root = Tk()
root.withdraw()
file_path = askopenfilename(
    title="CSV 파일을 선택하세요",
    filetypes=[("CSV files", "*.csv")]
)
root.destroy()

if not file_path:
    print("파일이 선택되지 않았습니다.")
else:
    # 2. 데이터 불러오기
    df = pd.read_csv(file_path)

    # 3. Prophet 입력 포맷으로 변환 (USO_Close 예측)
    df = df[['Date', 'USO_Close']].rename(columns={'Date': 'ds', 'USO_Close': 'y'})
    df['ds'] = pd.to_datetime(df['ds'])
    df['y'] = df['y'].interpolate()  # 결측치 선형 보간

    # 4. Prophet 모델 생성 및 학습
    m = Prophet()
    m.fit(df)

    # 5. 미래 90일 예측
    future = m.make_future_dataframe(periods=90)
    forecast = m.predict(future)

    # 6. 결과 시각화
    fig1 = m.plot(forecast)
    plt.title('USO Time Series of Closing Price (Prophet)')
    plt.xlabel('time')
    plt.ylabel('USO Closing Price')
    plt.show()

    fig2 = m.plot_components(forecast)
    plt.show()
>>>>>>> 8eaa13f (수정본)
